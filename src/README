yaara.berg, tamarbenami
209009687, 315244772

1. what design pattern we choose to remove bricks from the game?
   what are the pros and cons of using this pattern?
    We chose to leave the exclusive responsibility for adding and deleting items only in
    the BrickerGameManager class. We chose this option because centralizing the responsibility
    provides a single point of control for adding and removing game objects.
    This can simplify maintenance and updates, as changes related to object management are
    concentrated in one class.
    One of the main cons is that this design might violate the Open/Closed Principle,
    making it challenging to extend the behavior without modifying existing code.
    Adding new features related to object management might require changes to
    the BrickerGameManager class.


2. how did we implement the life counter visualization? why did we choose to implement it this way?
    The implementation of the life counter visualization was done using a single class named LifeCounter,
    which incorporates both a graphic life counter and a numeric life counter.
    This design choice follows the "has-a" relationship, where the LifeCounter class has
    components for both graphical and numeric representations of the life counter.
    By consolidating the logic for both visualizations within one class,
    the design ensures a unified and consistent interface for managing the life counter.
    This approach simplifies the code structure, making it easier to maintain and reducing
    the risk of discrepancies between the graphical and numeric representations.
    The encapsulation of all aspects of the life counter within a single class not only
    promotes easier maintenance but also provides flexibility for future extensions or modifications,
    fostering a modular and scalable design.

3. briefly explain how we implemented each CollisionStrategy and additional classes that
   were added to the game.
   We used the BasicCollisionStrategy as the standard collision strategy and with decorator we added
   a special behaviour to each brick.
   We decided to try and implement most od the logic function in the game manager, because we wanted
   to keep the game manager as the main class that controls the game.
   For adding balls strategy, we created balls instance and added relevant methods.
   For changing the camera zoom, the game manager will init a zoom and will change it back if needed.
   For adding paddle, we added a boolean variable to make sure only one paddle is added. the game manager
   init the timer for the paddle too.
   For the life gift, we created an new class LifeGift extended GameObject when her on collision will give us
   an extra life.


4. howe did we implement the DoubleCollision? why did we choose to implement it this way?
   how did we make sure no more than 3 strategies are used?
   because we used the decorator pattern, it was easily to implement double behavior.
   We learned that by implementing a small number of decorators, it is possible to put together
   different combinations producing an exponential number of new behaviors, so we used it in our assignment.
   In order to make sure no more than 3 strategies are used, it is practically say we allowed only one
   "double" behavior.
   So we added a counter and make sure to increase it every time that "double" behavior is added.


